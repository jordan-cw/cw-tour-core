{"version":3,"sources":["ng://ngx-tour-core/lib/tour.service.ts","ng://ngx-tour-core/lib/tour-hotkey-listener.component.ts","ng://ngx-tour-core/lib/tour.module.ts"],"names":["OFF","ON","PAUSED","None","Next","Previous","TourService","router","this","stepShow$","Subject","stepHide$","initialize$","start$","end$","pause$","resume$","anchorRegister$","anchorUnregister$","events$","mergeStatic","pipe","map","value","name","steps","anchors","status","TourState","isHotKeysEnabled","direction","TourDirection","prototype","initialize","stepDefaults","length","step","Object","assign","next","disableHotkeys","enableHotkeys","start","startAt","stepId","_this","goToStep","loadStep","events","filter","event","NavigationStart","first","subscribe","currentStep","hasOwnProperty","hideStep","end","undefined","pause","resume","showStep","toggle","hasNext","nextStep","indexOf","console","warn","prev","hasPrev","prevStep","goto","register","anchorId","anchor","Error","unregister","getStatus","isHotkeysEnabled","navigatePromise","Promise","resolve","route","navigateByUrl","Array","isArray","navigate","then","navigated","setTimeout","setCurrentStep","find","showTourStep","skipStep","hideTourStep","Injectable","Router","TourHotkeyListenerComponent","tourService","onEscapeKey","onArrowRightKey","onArrowLeftKey","Component","args","selector","template","HostListener","TourModule","forRoot","ngModule","providers","NgModule","declarations","exports","imports","CommonModule","RouterModule"],"mappings":"meAuBEA,IAAA,EACAC,GAAA,EACAC,OAAA,2DAIAC,KAAA,EACAC,KAAA,EACAC,SAAA,8DAGF,IAAAC,EAAA,WAyCE,SAAAA,EACUC,GAAAC,KAAAD,OAAAA,EAxCHC,KAAAC,UAAwB,IAAIC,EAAAA,QAC5BF,KAAAG,UAAwB,IAAID,EAAAA,QAC5BF,KAAAI,YAA4B,IAAIF,EAAAA,QAChCF,KAAAK,OAAqB,IAAIH,EAAAA,QACzBF,KAAAM,KAAqB,IAAIJ,EAAAA,QACzBF,KAAAO,OAAqB,IAAIL,EAAAA,QACzBF,KAAAQ,QAAsB,IAAIN,EAAAA,QAC1BF,KAAAS,gBAAmC,IAAIP,EAAAA,QACvCF,KAAAU,kBAAqC,IAAIR,EAAAA,QACzCF,KAAAW,QAAoDC,EAAAA,MACzDZ,KAAKC,UAAUY,KAAKC,EAAAA,IAAI,SAAAC,GAAS,MAAA,CAAGC,KAAM,WAAYD,MAAKA,MAC3Df,KAAKG,UAAUU,KAAKC,EAAAA,IAAI,SAAAC,GAAS,MAAA,CAAGC,KAAM,WAAYD,MAAKA,MAC3Df,KAAKI,YAAYS,KAAKC,EAAAA,IAAI,SAAAC,GAAS,MAAA,CAAGC,KAAM,aAAcD,MAAKA,MAC/Df,KAAKK,OAAOQ,KAAKC,EAAAA,IAAI,SAAAC,GAAS,MAAA,CAAGC,KAAM,QAASD,MAAKA,MACrDf,KAAKM,KAAKO,KAAKC,EAAAA,IAAI,SAAAC,GAAS,MAAA,CAAGC,KAAM,MAAOD,MAAKA,MACjDf,KAAKO,OAAOM,KAAKC,EAAAA,IAAI,SAAAC,GAAS,MAAA,CAAGC,KAAM,QAASD,MAAKA,MACrDf,KAAKQ,QAAQK,KAAKC,EAAAA,IAAI,SAAAC,GAAS,MAAA,CAAGC,KAAM,SAAUD,MAAKA,MACvDf,KAAKS,gBAAgBI,KACnBC,EAAAA,IAAI,SAAAC,GAAS,MAAA,CACXC,KAAM,iBACND,MAAKA,MAGTf,KAAKU,kBAAkBG,KACrBC,EAAAA,IAAI,SAAAC,GAAS,MAAA,CACXC,KAAM,mBACND,MAAKA,OAKJf,KAAAiB,MAAa,GAGbjB,KAAAkB,QAAuD,GACtDlB,KAAAmB,OAAoBC,EAAU5B,IAC9BQ,KAAAqB,kBAAmB,EACnBrB,KAAAsB,UAA2BC,EAAc3B,KAmOnD,OA7NSE,EAAA0B,UAAAC,WAAP,SAAkBR,EAAYS,GACxBT,GAAwB,EAAfA,EAAMU,SACjB3B,KAAKmB,OAASC,EAAU5B,IACxBQ,KAAKiB,MAAQA,EAAMH,IAAI,SAAAc,GAAQ,OAAAC,OAAOC,OAAO,GAAIJ,EAAcE,KAC/D5B,KAAKI,YAAY2B,KAAK/B,KAAKiB,SAIxBnB,EAAA0B,UAAAQ,eAAP,WACEhC,KAAKqB,kBAAmB,GAGnBvB,EAAA0B,UAAAS,cAAP,WACEjC,KAAKqB,kBAAmB,GAGnBvB,EAAA0B,UAAAU,MAAP,WACElC,KAAKmC,QAAQ,IAGRrC,EAAA0B,UAAAW,QAAP,SAAeC,GAAf,IAAAC,EAAArC,KACEA,KAAKmB,OAASC,EAAU3B,GACxBO,KAAKsC,SAAStC,KAAKuC,SAASH,IAC5BpC,KAAKK,OAAO0B,OACZ/B,KAAKD,OAAOyC,OACT3B,KAAK4B,EAAAA,OAAO,SAAAC,GAAS,OAAAA,aAAiBC,EAAAA,kBAAkBC,EAAAA,SACxDC,UAAU,WACLR,EAAKS,aAAeT,EAAKS,YAAYC,eAAe,UACtDV,EAAKW,SAASX,EAAKS,gBAKpBhD,EAAA0B,UAAAyB,IAAP,WACEjD,KAAKmB,OAASC,EAAU5B,IACxBQ,KAAKgD,SAAShD,KAAK8C,aACnB9C,KAAK8C,YAAcI,UACnBlD,KAAKM,KAAKyB,OACV/B,KAAKsB,UAAYC,EAAc3B,MAG1BE,EAAA0B,UAAA2B,MAAP,WACEnD,KAAKmB,OAASC,EAAU1B,OACxBM,KAAKgD,SAAShD,KAAK8C,aACnB9C,KAAKO,OAAOwB,QAGPjC,EAAA0B,UAAA4B,OAAP,WACEpD,KAAKmB,OAASC,EAAU3B,GACxBO,KAAKqD,SAASrD,KAAK8C,aACnB9C,KAAKQ,QAAQuB,QAGRjC,EAAA0B,UAAA8B,OAAP,SAAcH,GACRA,EACEnD,KAAK8C,YACP9C,KAAKmD,QAELnD,KAAKoD,SAGHpD,KAAK8C,YACP9C,KAAKiD,MAELjD,KAAKkC,SAKJpC,EAAA0B,UAAAO,KAAP,WACE/B,KAAKsB,UAAYC,EAAc3B,KAC3BI,KAAKuD,QAAQvD,KAAK8C,aACpB9C,KAAKsC,SACHtC,KAAKuC,SACHvC,KAAK8C,YAAYU,UAAYxD,KAAKiB,MAAMwC,QAAQzD,KAAK8C,aAAe,IAIxE9C,KAAKiD,OAKFnD,EAAA0B,UAAA+B,QAAP,SAAe3B,GACb,OAAKA,EAKHA,EAAK4B,WAAaN,WAClBlD,KAAKiB,MAAMwC,QAAQ7B,GAAQ5B,KAAKiB,MAAMU,OAAS,GAL/C+B,QAAQC,KAAK,yCACN,IAQJ7D,EAAA0B,UAAAoC,KAAP,WACE5D,KAAKsB,UAAYC,EAAc1B,SAC3BG,KAAK6D,QAAQ7D,KAAK8C,aACpB9C,KAAKsC,SACHtC,KAAKuC,SACHvC,KAAK8C,YAAYgB,UAAY9D,KAAKiB,MAAMwC,QAAQzD,KAAK8C,aAAe,IAIxE9C,KAAKiD,OAKFnD,EAAA0B,UAAAqC,QAAP,SAAejC,GACb,OAAKA,EAIEA,EAAKkC,WAAaZ,WAAwC,EAA3BlD,KAAKiB,MAAMwC,QAAQ7B,IAHvD8B,QAAQC,KAAK,6CACN,IAKJ7D,EAAA0B,UAAAuC,QAAP,SAAY3B,GACVpC,KAAKsC,SAAStC,KAAKuC,SAASH,KAGvBtC,EAAA0B,UAAAwC,SAAP,SAAgBC,EAAkBC,GAChC,GAAKD,EAAL,CAEA,GAAIjE,KAAKkB,QAAQ+C,GACf,MAAM,IAAIE,MAAM,YAAcF,EAAW,wBAE3CjE,KAAKkB,QAAQ+C,GAAYC,EACzBlE,KAAKS,gBAAgBsB,KAAKkC,KAGrBnE,EAAA0B,UAAA4C,WAAP,SAAkBH,GACXA,WAEEjE,KAAKkB,QAAQ+C,GACpBjE,KAAKU,kBAAkBqB,KAAKkC,KAGvBnE,EAAA0B,UAAA6C,UAAP,WACE,OAAOrE,KAAKmB,QAGPrB,EAAA0B,UAAA8C,iBAAP,WACE,OAAOtE,KAAKqB,kBAGNvB,EAAA0B,UAAAc,SAAR,SAAiBV,GAAjB,IAAAS,EAAArC,KACE,IAAK4B,EAGH,OAFA8B,QAAQC,KAAK,sCACb3D,KAAKiD,UAGHsB,EAAoC,IAAIC,QAAQ,SAAAC,GAClD,OAAAA,GAAQ,KAEN7C,EAAK8C,QAAUxB,WAAmC,iBAAftB,EAAK8C,MAC1CH,EAAkBvE,KAAKD,OAAO4E,cAAc/C,EAAK8C,OACxC9C,EAAK8C,OAASE,MAAMC,QAAQjD,EAAK8C,SAC1CH,EAAkBvE,KAAKD,OAAO+E,SAASlD,EAAK8C,QAE9CH,EAAgBQ,KAAK,SAAAC,IACD,IAAdA,GACFC,WAAW,WAAM,OAAA5C,EAAK6C,eAAetD,QAKnC9B,EAAA0B,UAAAe,SAAR,SAAiBH,GACf,MAAsB,iBAAXA,EACFpC,KAAKiB,MAAMmB,GAEXpC,KAAKiB,MAAMkE,KAAK,SAAAvD,GAAQ,OAAAA,EAAKQ,SAAWA,KAI3CtC,EAAA0B,UAAA0D,eAAR,SAAuBtD,GAAvB,IAAAS,EAAArC,KACMA,KAAK8C,aACP9C,KAAKgD,SAAShD,KAAK8C,aAErB9C,KAAK8C,YAAclB,EACnB5B,KAAKqD,SAASrD,KAAK8C,aACnB9C,KAAKD,OAAOyC,OACT3B,KAAK4B,EAAAA,OAAO,SAAAC,GAAS,OAAAA,aAAiBC,EAAAA,kBAAkBC,EAAAA,SACxDC,UAAU,SAACH,GACNL,EAAKS,aAAeT,EAAKS,YAAYC,eAAe,UACtDV,EAAKW,SAASX,EAAKS,gBAKnBhD,EAAA0B,UAAA6B,SAAR,SAAiBzB,OACTsC,EAASlE,KAAKkB,QAAQU,GAAQA,EAAKqC,UACzC,GAAKC,EAIHA,EAAOkB,aAAaxD,GACpB5B,KAAKC,UAAU8B,KAAKH,OALT,CACK5B,KAAKiB,MAAMwC,QAAQ7B,GACnC5B,KAAKqF,aAOCvF,EAAA0B,UAAAwB,SAAV,SAAmBpB,OACXsC,EAASlE,KAAKkB,QAAQU,GAAQA,EAAKqC,UACpCC,IAGLA,EAAOoB,eACPtF,KAAKG,UAAU4B,KAAKH,KAGd9B,EAAA0B,UAAA6D,SAAR,WACE,OAAQrF,KAAKsB,WACX,KAAKC,EAAc3B,KACjBI,KAAK+B,OACL,MAEF,KAAKR,EAAc1B,SACjBG,KAAK4D,6BArQZ2B,EAAAA,sDAjCyBC,EAAAA,UA2S1B1F,EA1QA,GClCA2F,EAAA,WASE,SAAAA,EAAmBC,GAAA1F,KAAA0F,YAAAA,EAoCrB,OA9BSD,EAAAjE,UAAAmE,YADP,WAGI3F,KAAK0F,YAAYrB,cAAgBjD,EAAU3B,IAC3CO,KAAK0F,YAAYpB,oBAEjBtE,KAAK0F,YAAYzC,OAKdwC,EAAAjE,UAAAoE,gBADP,WAGI5F,KAAK0F,YAAYrB,cAAgBjD,EAAU3B,IAC3CO,KAAK0F,YAAYnC,QAAQvD,KAAK0F,YAAY5C,cAC1C9C,KAAK0F,YAAYpB,oBAEjBtE,KAAK0F,YAAY3D,QAKd0D,EAAAjE,UAAAqE,eADP,WAGI7F,KAAK0F,YAAYrB,cAAgBjD,EAAU3B,IAC3CO,KAAK0F,YAAY7B,QAAQ7D,KAAK0F,YAAY5C,cAC1C9C,KAAK0F,YAAYpB,oBAEjBtE,KAAK0F,YAAY9B,4BAtCtBkC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,uBACVC,SAAU,yEAJHnG,0CAYNoG,EAAAA,aAAYH,KAAA,CAAC,kDAUbG,EAAAA,aAAYH,KAAA,CAAC,qDAWbG,EAAAA,aAAYH,KAAA,CAAC,+BAUhBN,EA7CA,GCAAU,EAAA,WAOA,SAAAA,KAcA,OARkBA,EAAAC,QAAd,WACI,MAAO,CACHC,SAAUF,EACVG,UAAW,CACPxG,yBAVfyG,EAAAA,SAAQR,KAAA,CAAC,CACNS,aAAc,CAACf,GACfgB,QAAS,CAAChB,GACViB,QAAS,CAACC,EAAAA,aAAcC,EAAAA,kBAW5BT,EArBA","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { NavigationStart, Router, UrlSegment } from '@angular/router';\r\n\r\nimport { TourAnchorDirective } from './tour-anchor.directive';\r\nimport { Subject, Observable, merge as mergeStatic } from 'rxjs';\r\nimport { first, map, filter } from 'rxjs/operators';\r\n\r\nexport interface IStepOption {\r\n  stepId?: string;\r\n  anchorId?: string;\r\n  title?: string;\r\n  content?: string;\r\n  route?: string | UrlSegment[];\r\n  nextStep?: number | string;\r\n  prevStep?: number | string;\r\n  placement?: any;\r\n  preventScrolling?: boolean;\r\n  prevBtnTitle?: string;\r\n  nextBtnTitle?: string;\r\n  endBtnTitle?: string;\r\n}\r\n\r\nexport enum TourState {\r\n  OFF,\r\n  ON,\r\n  PAUSED\r\n}\r\n\r\nexport enum TourDirection {\r\n  None = 0,\r\n  Next = 1,\r\n  Previous = 2\r\n}\r\n\r\n@Injectable()\r\nexport class TourService<T extends IStepOption = IStepOption> {\r\n  public stepShow$: Subject<T> = new Subject();\r\n  public stepHide$: Subject<T> = new Subject();\r\n  public initialize$: Subject<T[]> = new Subject();\r\n  public start$: Subject<T> = new Subject();\r\n  public end$: Subject<any> = new Subject();\r\n  public pause$: Subject<T> = new Subject();\r\n  public resume$: Subject<T> = new Subject();\r\n  public anchorRegister$: Subject<string> = new Subject();\r\n  public anchorUnregister$: Subject<string> = new Subject();\r\n  public events$: Observable<{ name: string; value: any }> = mergeStatic(\r\n    this.stepShow$.pipe(map(value => ({ name: 'stepShow', value }))),\r\n    this.stepHide$.pipe(map(value => ({ name: 'stepHide', value }))),\r\n    this.initialize$.pipe(map(value => ({ name: 'initialize', value }))),\r\n    this.start$.pipe(map(value => ({ name: 'start', value }))),\r\n    this.end$.pipe(map(value => ({ name: 'end', value }))),\r\n    this.pause$.pipe(map(value => ({ name: 'pause', value }))),\r\n    this.resume$.pipe(map(value => ({ name: 'resume', value }))),\r\n    this.anchorRegister$.pipe(\r\n      map(value => ({\r\n        name: 'anchorRegister',\r\n        value\r\n      }))\r\n    ),\r\n    this.anchorUnregister$.pipe(\r\n      map(value => ({\r\n        name: 'anchorUnregister',\r\n        value\r\n      }))\r\n    )\r\n  );\r\n\r\n  public steps: T[] = [];\r\n  public currentStep: T;\r\n\r\n  public anchors: { [anchorId: string]: TourAnchorDirective } = {};\r\n  private status: TourState = TourState.OFF;\r\n  private isHotKeysEnabled = true;\r\n  private direction: TourDirection = TourDirection.Next;\r\n\r\n  constructor(\r\n    private router: Router,\r\n  ) { }\r\n\r\n  public initialize(steps: T[], stepDefaults?: T): void {\r\n    if (steps && steps.length > 0) {\r\n      this.status = TourState.OFF;\r\n      this.steps = steps.map(step => Object.assign({}, stepDefaults, step));\r\n      this.initialize$.next(this.steps);\r\n    }\r\n  }\r\n\r\n  public disableHotkeys(): void {\r\n    this.isHotKeysEnabled = false;\r\n  }\r\n\r\n  public enableHotkeys(): void {\r\n    this.isHotKeysEnabled = true;\r\n  }\r\n\r\n  public start(): void {\r\n    this.startAt(0);\r\n  }\r\n\r\n  public startAt(stepId: number | string): void {\r\n    this.status = TourState.ON;\r\n    this.goToStep(this.loadStep(stepId));\r\n    this.start$.next();\r\n    this.router.events\r\n      .pipe(filter(event => event instanceof NavigationStart), first())\r\n      .subscribe(() => {\r\n        if (this.currentStep && this.currentStep.hasOwnProperty('route')) {\r\n          this.hideStep(this.currentStep);\r\n        }\r\n      });\r\n  }\r\n\r\n  public end(): void {\r\n    this.status = TourState.OFF;\r\n    this.hideStep(this.currentStep);\r\n    this.currentStep = undefined;\r\n    this.end$.next();\r\n    this.direction = TourDirection.Next;\r\n  }\r\n\r\n  public pause(): void {\r\n    this.status = TourState.PAUSED;\r\n    this.hideStep(this.currentStep);\r\n    this.pause$.next();\r\n  }\r\n\r\n  public resume(): void {\r\n    this.status = TourState.ON;\r\n    this.showStep(this.currentStep);\r\n    this.resume$.next();\r\n  }\r\n\r\n  public toggle(pause?: boolean): void {\r\n    if (pause) {\r\n      if (this.currentStep) {\r\n        this.pause();\r\n      } else {\r\n        this.resume();\r\n      }\r\n    } else {\r\n      if (this.currentStep) {\r\n        this.end();\r\n      } else {\r\n        this.start();\r\n      }\r\n    }\r\n  }\r\n\r\n  public next(): void {\r\n    this.direction = TourDirection.Next;\r\n    if (this.hasNext(this.currentStep)) {\r\n      this.goToStep(\r\n        this.loadStep(\r\n          this.currentStep.nextStep || this.steps.indexOf(this.currentStep) + 1\r\n        )\r\n      );\r\n    } else {\r\n      this.end();\r\n      return;\r\n    }\r\n  }\r\n\r\n  public hasNext(step: T): boolean {\r\n    if (!step) {\r\n      console.warn('Can\\'t get next step. No currentStep.');\r\n      return false;\r\n    }\r\n    return (\r\n      step.nextStep !== undefined ||\r\n      this.steps.indexOf(step) < this.steps.length - 1\r\n    );\r\n  }\r\n\r\n  public prev(): void {\r\n    this.direction = TourDirection.Previous;\r\n    if (this.hasPrev(this.currentStep)) {\r\n      this.goToStep(\r\n        this.loadStep(\r\n          this.currentStep.prevStep || this.steps.indexOf(this.currentStep) - 1\r\n        )\r\n      );\r\n    } else {\r\n      this.end();\r\n      return;\r\n    }\r\n  }\r\n\r\n  public hasPrev(step: T): boolean {\r\n    if (!step) {\r\n      console.warn('Can\\'t get previous step. No currentStep.');\r\n      return false;\r\n    }\r\n    return step.prevStep !== undefined || this.steps.indexOf(step) > 0;\r\n  }\r\n\r\n  public goto(stepId: number | string): void {\r\n    this.goToStep(this.loadStep(stepId));\r\n  }\r\n\r\n  public register(anchorId: string, anchor: TourAnchorDirective): void {\r\n    if (!anchorId)\r\n      return;\r\n    if (this.anchors[anchorId]) {\r\n      throw new Error('anchorId ' + anchorId + ' already registered!');\r\n    }\r\n    this.anchors[anchorId] = anchor;\r\n    this.anchorRegister$.next(anchorId);\r\n  }\r\n\r\n  public unregister(anchorId: string): void {\r\n    if (!anchorId)\r\n      return;\r\n    delete this.anchors[anchorId];\r\n    this.anchorUnregister$.next(anchorId);\r\n  }\r\n\r\n  public getStatus(): TourState {\r\n    return this.status;\r\n  }\r\n\r\n  public isHotkeysEnabled(): boolean {\r\n    return this.isHotKeysEnabled;\r\n  }\r\n\r\n  private goToStep(step: T): void {\r\n    if (!step) {\r\n      console.warn('Can\\'t go to non-existent step');\r\n      this.end();\r\n      return;\r\n    }\r\n    let navigatePromise: Promise<boolean> = new Promise(resolve =>\r\n      resolve(true)\r\n    );\r\n    if (step.route !== undefined && typeof step.route === 'string') {\r\n      navigatePromise = this.router.navigateByUrl(step.route);\r\n    } else if (step.route && Array.isArray(step.route)) {\r\n      navigatePromise = this.router.navigate(step.route);\r\n    }\r\n    navigatePromise.then(navigated => {\r\n      if (navigated !== false) {\r\n        setTimeout(() => this.setCurrentStep(step));\r\n      }\r\n    });\r\n  }\r\n\r\n  private loadStep(stepId: number | string): T {\r\n    if (typeof stepId === 'number') {\r\n      return this.steps[stepId];\r\n    } else {\r\n      return this.steps.find(step => step.stepId === stepId);\r\n    }\r\n  }\r\n\r\n  private setCurrentStep(step: T): void {\r\n    if (this.currentStep) {\r\n      this.hideStep(this.currentStep);\r\n    }\r\n    this.currentStep = step;\r\n    this.showStep(this.currentStep);\r\n    this.router.events\r\n      .pipe(filter(event => event instanceof NavigationStart), first())\r\n      .subscribe((event) => {\r\n        if (this.currentStep && this.currentStep.hasOwnProperty('route')) {\r\n          this.hideStep(this.currentStep);\r\n        }\r\n      });\r\n  }\r\n\r\n  private showStep(step: T): void {\r\n    const anchor = this.anchors[step && step.anchorId];\r\n    if (!anchor) {\r\n      let stepIndex = this.steps.indexOf(step);\r\n      this.skipStep();\r\n    } else {\r\n      anchor.showTourStep(step);\r\n      this.stepShow$.next(step);\r\n    }\r\n  }\r\n\r\n  protected hideStep(step: T): void {\r\n    const anchor = this.anchors[step && step.anchorId];\r\n    if (!anchor) {\r\n      return;\r\n    }\r\n    anchor.hideTourStep();\r\n    this.stepHide$.next(step);\r\n  }\r\n\r\n  private skipStep() {\r\n    switch (this.direction) {\r\n      case TourDirection.Next: {\r\n        this.next();\r\n        break;\r\n      }\r\n      case TourDirection.Previous: {\r\n        this.prev();\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Component, HostListener } from '@angular/core';\r\n\r\nimport { TourService, TourState } from './tour.service';\r\n\r\n@Component({\r\n  selector: 'tour-hotkey-listener',\r\n  template: `<ng-content></ng-content>`\r\n})\r\nexport class TourHotkeyListenerComponent {\r\n  constructor(public tourService: TourService) {}\r\n\r\n  /**\r\n   * Configures hot keys for controlling the tour with the keyboard\r\n   */\r\n  @HostListener('window:keydown.Escape')\r\n  public onEscapeKey(): void {\r\n    if (\r\n      this.tourService.getStatus() === TourState.ON &&\r\n      this.tourService.isHotkeysEnabled()\r\n    ) {\r\n      this.tourService.end();\r\n    }\r\n  }\r\n\r\n  @HostListener('window:keydown.ArrowRight')\r\n  public onArrowRightKey(): void {\r\n    if (\r\n      this.tourService.getStatus() === TourState.ON &&\r\n      this.tourService.hasNext(this.tourService.currentStep) &&\r\n      this.tourService.isHotkeysEnabled()\r\n    ) {\r\n      this.tourService.next();\r\n    }\r\n  }\r\n\r\n  @HostListener('window:keydown.ArrowLeft')\r\n  public onArrowLeftKey(): void {\r\n    if (\r\n      this.tourService.getStatus() === TourState.ON &&\r\n      this.tourService.hasPrev(this.tourService.currentStep) &&\r\n      this.tourService.isHotkeysEnabled()\r\n    ) {\r\n      this.tourService.prev();\r\n    }\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { TourHotkeyListenerComponent } from './tour-hotkey-listener.component';\r\nimport { TourService } from './tour.service';\r\n\r\n@NgModule({\r\n    declarations: [TourHotkeyListenerComponent],\r\n    exports: [TourHotkeyListenerComponent],\r\n    imports: [CommonModule, RouterModule],\r\n})\r\nexport class TourModule {\r\n    public static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: TourModule,\r\n            providers: [\r\n                TourService,\r\n            ],\r\n        };\r\n    }\r\n};\r\n\r\nexport { TourService };\r\n"]}